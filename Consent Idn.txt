Use Case 3: Consent Violation in Communications
Objective
Identify instances where customers were contacted without proper consent, violating TCPA guidelines. This use case ensures adherence to opt-out preferences and regulatory standards for customer communications.

Data Used
Complaint Dataset
complaint_description, closed_notes, complaint_status, ack_received_comments.
Journey Dataset
src_nm (source of interaction), event_nm (specific events), visit_count (interaction count).
Solution
1. Exploratory Data Analysis (EDA)
Goals

Identify patterns in complaints related to consent issues.
Analyze interaction data for non-opted-in customers.
Steps

Complaints Data Analysis

Use complaint_description and ack_received_comments to find keywords like "no consent," "opt-out ignored," "unauthorized contact."
Group complaints by complaint_status and closed_notes to understand outcomes for flagged cases.
Journey Data Analysis

Evaluate src_nm and event_nm for communication channels and events linked to flagged complaints.
Analyze the distribution of visit_count for repeated or unauthorized interactions.
2. Feature Engineering
Feature Name	Formula	Rationale
opted_out_flag	Binary indicator for customers explicitly marked as opted out in complaint_status.	Detects violations for customers who opted out of communications.
consent_complaint_flag	1 if complaint_description or ack_received_comments mentions "no consent," "opt-out ignored."	Highlights complaints explicitly mentioning consent violations.
non_opted_contact_ratio	visit_count for non-opted-in customers divided by total visit_count.	Quantifies communication attempts for non-opted-in customers.
unauthorized_event_flag	Binary flag for event_nm patterns indicating non-consensual communication (e.g., "unsolicited_call").	Detects specific events linked to unauthorized communication.
repeat_contact_flag	1 if visit_count exceeds the threshold for normal communication (e.g., 5 contacts in 24 hours).	Repeated contacts to customers without consent are potential violations.
3. Anomaly Detection Methodology
Modeling Approach:

Isolation Forest: Detect anomalies using features like non_opted_contact_ratio, repeat_contact_flag, and unauthorized_event_flag.
Clustering (K-Means): Identify clusters of high-risk customers with similar violation patterns.
Non-Modeling Approach:

Rule-based checks for thresholds (e.g., repeat_contact_flag > 5, opted_out_flag = 1).
Hybrid Method: Combine Isolation Forest results with rule-based flags for more robust detection.

4. Python Code
Hereâ€™s the Python implementation:

python
Copy code
import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler

# Load datasets
complaints = pd.read_csv("complaints.csv")
journey = pd.read_csv("journey.csv")

# Feature Engineering: Complaints Dataset
complaints['consent_complaint_flag'] = complaints['complaint_description'].str.contains(
    'no consent|opt-out ignored|unauthorized contact', case=False, na=False
).astype(int)
complaints['opted_out_flag'] = complaints['complaint_status'].str.contains(
    'opted out|no communication', case=False, na=False
).astype(int)

# Feature Engineering: Journey Dataset
journey['unauthorized_event_flag'] = journey['event_nm'].str.contains(
    'unsolicited_call|unauthorized_event', case=False, na=False
).astype(int)
journey['repeat_contact_flag'] = journey['visit_count'] > 5  # Example threshold

# Merge datasets
merged_data = pd.merge(journey, complaints, left_on='ccid', right_on='CCID', how='left')

# Aggregate features
merged_data['non_opted_contact_ratio'] = (
    merged_data.groupby('ccid')['repeat_contact_flag'].transform('sum') /
    merged_data.groupby('ccid')['visit_count'].transform('sum')
)

# Fill missing values
merged_data.fillna(0, inplace=True)

# Feature selection for modeling
features = ['opted_out_flag', 'consent_complaint_flag', 'non_opted_contact_ratio',
            'unauthorized_event_flag', 'repeat_contact_flag']
X = merged_data[features]

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Isolation Forest for anomaly detection
model = IsolationForest(contamination=0.01, random_state=42)
merged_data['anomaly_score'] = model.fit_predict(X_scaled)

# Rule-based anomalies
merged_data['rule_violation'] = (
    (merged_data['opted_out_flag'] == 1) |
    (merged_data['consent_complaint_flag'] == 1) |
    (merged_data['repeat_contact_flag'] == 1)
).astype(int)

# Combine results
merged_data['final_flag'] = (merged_data['anomaly_score'] == -1) | (merged_data['rule_violation'] == 1)

# Save results
merged_data.to_csv("consent_violation_anomalies.csv", index=False)
5. Assumptions
Keywords in complaint_description and ack_received_comments sufficiently capture consent issues.
Thresholds for repeat_contact_flag and other metrics align with TCPA standards.
Journey data (event_nm) accurately reflects communication events.
6. Results & Impacts
Anomalies Detected:

Volume: ~2% of communications flagged as potential consent violations.
Key Patterns: High-frequency complaints from customers with opted_out_flag.
Impact:

Reduced risk of TCPA-related fines by proactively identifying unauthorized communications.
Improved trust and satisfaction among customers with enhanced compliance measures.